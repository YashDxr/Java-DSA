//BRUTEFORCE - [O(nxm) x O(n+m)] + O(nxm) 
    class Solution {
    // private void changeRow(int[][] matrix , int row){
    //     for(int j = 0 ; j < matrix[row].length; j++){
    //             if(matrix[row][j] != 0){
    //                 matrix[row][j] = -999;
    //             }
    //         }
    //     }
    // private void changeCol(int[][] matrix , int col){
    //     for(int i = 0 ; i < matrix.length; i++){
    //             if(matrix[i][col] != 0){
    //                 matrix[i][col] = -999;
    //             }
    //         }
    //     }
    // public void setZeroes(int[][] matrix) {
    //     for(int i = 0 ; i < matrix.length ; i++){
    //         for(int j = 0 ; j < matrix[0].length ; j++){
    //             if(matrix[i][j] == 0){
    //                 changeRow(matrix , i);
    //                 changeCol(matrix , j);
    //             }
    //         }
    //     }
    //     for(int i = 0 ; i < matrix.length ; i++){
    //         for(int j = 0 ; j < matrix[0].length ; j++){
    //             if(matrix[i][j] == -999){
    //                 matrix[i][j] = 0;
    //             }
    //         }
    //     }
        
    // }
    //}


//BETTER  TC- O(nm) + O(nm)= O(2nm)        SC = O(n)+O(m)
    class Solution {
    // public void setZeroes(int[][] matrix){
    //     int n = matrix.length;
    //     int m = matrix[0].length;
    //     int[] row = new int[n];
    //     int[] col = new int[m];
    //     for(int i = 0 ; i < n ; i++){
    //         for(int j = 0; j<m ;j++){
    //             if(matrix[i][j] == 0){
    //                 row[i] = 1;
    //                 col[j] = 1;
    //             }
    //         }
    //     }
    //     for(int i = 0 ; i < n ; i++){
    //         for(int j = 0; j<m ;j++){
    //             if(row[i] == 1 || col[j] == 1){
    //                 matrix[i][j] = 0;
    //             }
    //         }
    //     }
        
    // }
    //}

// OPTIMAL   TC- O(2nm)         SC-O(1)
    class Solution {
        public void setZeroes(int[][] matrix){
        //     int[] row = new int[n]; -----> matrix[0][j]
        //     int[] col = new int[m];------> matrix[i][0]
        //    int col0 = 1;
        //    int n = matrix.length;
        //    int m = matrix[0].length;
        //    for(int i = 0 ; i < n ; i++){
        //        for(int j = 0 ; j < m ; j++){
        //            if(matrix[i][j] == 0){
        //                matrix[i][0] = 0;
        //                if( j != 0 ) {
        //                    matrix[0][j] = 0;
        //                }
        //                else{
        //                    col0 = 0;
        //                }
        //            }
        //        }
        //    }

        //    for(int i = 1 ; i < n ; i++){
        //        for(int j = 1 ; j < m ; j++){
        //            if(matrix[i][j] != 0){
        //                if(matrix[0][j] == 0 || matrix[i][0] == 0){
        //                    matrix[i][j] = 0;
        //                }
        //            }
        //        }
        //    }
        //    if(matrix[0][0] == 0){
        //        for(int j = 0 ; j < m ; j++){
        //            matrix[0][j] = 0;
        //        }
        //    }
        //    if(col0==0){
        //        for(int i = 0 ; i < n ; i++){
        //            matrix[i][0] = 0;
        //        }
        //    } 
        //}
    }